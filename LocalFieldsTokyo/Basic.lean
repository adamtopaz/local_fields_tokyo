import Mathlib

-- Let K be a complete valued field.
variable (K : Type) [Field K] [ValuativeRel K]
  [UniformSpace K] [IsTopologicalDivisionRing K]
  [CompleteSpace K] [ValuativeTopology K]
  [ValuativeRel.IsNontrivial K]

open Topology in
theorem IsTopologicalAddGroup.locallyCompactSpace_of_nhds_zero
  (M : Type*) [AddCommGroup M] [TopologicalSpace M]
  [IsTopologicalAddGroup M]
  (h : ‚àÄ u ‚àà ùìù (0 : M), ‚àÉ c ‚àà ùìù (0 : M), c ‚äÜ u ‚àß IsCompact c) :
  LocallyCompactSpace M := sorry

-- Condition 1: K is locally compact
def cond1 : Prop := LocallyCompactSpace K

-- Condition 2: The valuation subring is compact
def cond2 : Prop := IsCompact ((ValuativeRel.valuation K).valuationSubring : Set K)

-- Condition 3: K has discrete valuation, rank ‚â§ 1, is nontrivial, and has finite residue field
def cond3 : Prop :=
  (ValuativeRel.IsDiscrete K) ‚àß
  (ValuativeRel.IsRankLeOne K) ‚àß
  (ValuativeRel.IsNontrivial K) ‚àß
  Finite (IsLocalRing.ResidueField <|
    ValuativeRel.valuation K |>.valuationSubring)

-- cond1 ‚Üí cond2
lemma locally_compact_implies_compact_valuation_subring :
    cond1 K ‚Üí cond2 K := by
  sorry

open Topology Pointwise in
-- cond2 ‚Üí cond1
lemma compact_valuation_subring_implies_locally_compact :
    cond2 K ‚Üí cond1 K := by
  intro h
  let v := ValuativeRel.valuation K
  let Œì := ValuativeRel.ValueGroupWithZero K
  have h : IsCompact { x : K | v x ‚â§ 1 } := h
  dsimp [cond2, cond1] at h ‚ä¢
  apply IsTopologicalAddGroup.locallyCompactSpace_of_nhds_zero
  intro U hU
  rw [ValuativeTopology.mem_nhds_iff] at hU
  obtain ‚ü®Œ≥, hŒ≥‚ü© := hU
  have hŒ≥ : {x | v x < Œ≥} ‚äÜ U := hŒ≥
  obtain ‚ü®Œ¥, hŒ¥1, hŒ¥2‚ü© : ‚àÉ Œ¥ : Œì, 0 < Œ¥ ‚àß Œ¥ < 1 := sorry
  obtain ‚ü®a, ha‚ü© : ‚àÉ a : K, v a = Œ¥ := sorry
  obtain ‚ü®b, hb‚ü© : ‚àÉ b : K, v b = Œ≥ := sorry
  let W : Set K := (a * b) ‚Ä¢ { x : K | v x ‚â§ 1 }
  have hW : W = { x : K | v x ‚â§ Œ¥ * Œ≥ } := sorry
  have hW' : W ‚äÜ U := by
    intro x hx
    apply hŒ≥
    dsimp
    rw [hW] at hx
    dsimp at hx
    suffices Œ¥ * Œ≥ < Œ≥ by exact lt_of_le_of_lt hx this
    conv =>
      enter [2]
      rw [‚Üê one_mul Œ≥]
    push_cast
    apply mul_lt_mul
    assumption
    exact Preorder.le_refl ‚ÜëŒ≥
    exact Units.zero_lt Œ≥
    exact zero_le_one' Œì
  have hW'' : IsCompact W := sorry
  use W
  refine ‚ü®?_, hW', hW''‚ü©
  rw [ValuativeTopology.mem_nhds_iff, hW]
  refine ‚ü®Units.mk0 (Œ¥ * Œ≥) ?_, ?_‚ü©
  have : (Œ≥ : Œì) ‚â† 0 := Units.ne_zero Œ≥
  ¬∑ sorry
  ¬∑ intro x hx
    have : v x < Œ¥ * Œ≥ := hx
    show v x ‚â§ Œ¥ * Œ≥
    sorry

-- cond2 ‚Üí cond3
lemma compact_valuation_subring_implies_discrete_etc :
    cond2 K ‚Üí cond3 K := by
  sorry

-- cond3 ‚Üí cond1
lemma discrete_etc_implies_locally_compact :
    cond3 K ‚Üí cond1 K := by
  sorry

theorem main_theorem : List.TFAE [
    cond1 K,
    cond2 K,
    cond3 K
    ] := by
  tfae_have 1 ‚Üí 2 :=
    locally_compact_implies_compact_valuation_subring K
  tfae_have 2 ‚Üí 3 :=
    compact_valuation_subring_implies_discrete_etc K
  tfae_have 3 ‚Üí 1 :=
    discrete_etc_implies_locally_compact K
  tfae_finish
